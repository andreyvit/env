# .zshrc
# executed for interactive shells only, after .zshenv
#
# Using z:
#
#    z foo              # cd into highest ranked directory matching foo
#    z foo bar          # cd into highest ranked directory matching foo and bar
#    z foo /            # cd into a subdirectory starting with foo
#
#    z ~/foo            # z also works like a regular cd command
#    z foo/             # cd into relative path
#    z ..               # cd one level up
#    z -                # cd into previous directory
#
#    zi foo             # cd with interactive selection (using fzf)
#    z foo<SPACE><TAB>  # show interactive completions (zoxide v0.8.0+, bash 4.4+/fish/zsh only)

##### ALIASES #####

alias pt='pt --nogroup'
alias ptg='pt --group'
alias da='direnv allow'
alias sqlite3nice="sqlite3 -column -header"


##### SETTINGS #####

export EMAIL="Andrey Tarantsov <andrey@tarantsov.com>"
export MANSECT=1:3tcl:n:l:8:3:2:3posix:3pm:3perl:5:4:9:6:7
export ACK_OPTIONS="--type-add php=.module"

if [[ -n $SSH_CONNECTION ]]; then export EDITOR='vim'; else export EDITOR=subl_wait; fi
export VISUAL=$EDITOR


##### PATHS #####

export PATH=~/go/bin:~/bin:~/.yarn/bin:~/env/bin:/usr/local/heroku/bin:/usr/local/sbin:/usr/local/bin:$PATH
# export MANPATH="/usr/local/man:$MANPATH"

if test -d /usr/local/go/bin; then export PATH=$PATH:/usr/local/go/bin; fi
if test -d /opt/homebrew/opt/ruby/bin; then export PATH=/opt/homebrew/opt/ruby/bin:$PATH; fi
if test -d /usr/local/cuda; then export PATH=$PATH:/usr/local/cuda/bin; export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH; fi
if test -d /usr/local/opt/ruby/bin; then
  export PATH="/usr/local/opt/ruby/bin:$PATH"
  export LDFLAGS="-L/usr/local/opt/ruby/lib"
  export CPPFLAGS="-I/usr/local/opt/ruby/include"
  export PKG_CONFIG_PATH="/usr/local/opt/ruby/lib/pkgconfig"
fi
test -d /Applications/'Android Studio.app'/Contents/jbr/Contents/Home && export JAVA_HOME=/Applications/'Android Studio.app'/Contents/jbr/Contents/Home


##### PROMPT #####

_fishy_collapsed_wd() {
  echo $(pwd | perl -pe '
   BEGIN {
      binmode STDIN,  ":encoding(UTF-8)";
      binmode STDOUT, ":encoding(UTF-8)";
   }; s|^$ENV{HOME}|~|g; s|/([^/.])[^/]*(?=/)|/$1|g; s|/\.([^/])[^/]*(?=/)|/.$1|g
')
}

# PROMPT='%{$fg[$user_color]%}$(_fishy_collapsed_wd)%{$reset_color%}%(!.#.>) '
# PROMPT2='%{$fg[red]%}\ %{$reset_color%}'

case $TERM in
dumb)
    PROMPT="%#"
    ;;
*)
    # PROMPT="[%(!.%S.)%n%x%(!.%s.)@%m:%~]%(?..%B%?%b)%70(l||)%B%#%b "
    PROMPT='%F{green}$(_fishy_collapsed_wd)%(?.. %F{red}%?) %F{green}%#%f '
    PROMPT2="%F{red}\%f "
    ;;
esac


##### ZSH OPTIONS #####

setopt PROMPT_SUBST            # enable command subst in prompt
setopt AUTO_CD                 # cd on just a dir name
setopt AUTO_PUSHD              # cd pushes dir on dir stack
setopt PUSHD_IGNORE_DUPS       # ignore dup dirs in dir stack
setopt NO_AUTO_MENU            # use menu completion on tab tab
setopt NO_LIST_BEEP            # don't beep on an ambiguous completion
setopt EXTENDED_GLOB           # treat '#', '~' and '^' as part of patterns
setopt BANG_HIST               # do history expansion (!)
setopt HIST_VERIFY             # edit after history expansion
setopt SHARE_HISTORY           # append immediately, import from history
setopt EXTENDED_HISTORY        # save timestamp and duration
setopt HIST_IGNORE_ALL_DUPS    # remove older dups from history
setopt HIST_IGNORE_SPACE       # don't save commands with leading space
setopt HIST_REDUCE_BLANKS      # trim extra blanks when adding to history
setopt CORRECT CORRECT_ALL     # correct the spelling of commands and arguments
setopt NOTIFY                  # report status of background jobs immediately
setopt NO_BEEP                 # don't beep on error in ZLE

WORDCHARS='*?.~=&;!#%^'        # remove [](){}<>/$-_

bindkey -e                     # enable eMacs-style bindings


##### INTEGRATIONS #####
#

mkdir -p ~/.zshplugins
[[ -r ~/.zshplugins/znap/znap.zsh ]] || git clone --depth 1 -- https://github.com/marlonrichert/zsh-snap.git ~/.zshplugins/znap/
source ~/.zshplugins/znap/znap.zsh

znap source marlonrichert/zsh-autocomplete

# if [ -f '/Users/andreyvit/google-cloud-sdk/path.zsh.inc' ]; then source '/Users/andreyvit/google-cloud-sdk/path.zsh.inc'; fi
# if [ -f '/Users/andreyvit/google-cloud-sdk/completion.zsh.inc' ]; then source '/Users/andreyvit/google-cloud-sdk/completion.zsh.inc'; fi
# test -f ~/.iterm2_shell_integration.zsh && source ~/.iterm2_shell_integration.zsh
# if which swiftenv > /dev/null; then eval "$(swiftenv init -)"; fi
# export SDKMAN_DIR="$HOME/.sdkman"; [[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
znap eval pkgx 'pkgx --shellcode'
znap eval direnv 'direnv hook zsh'
znap eval atuin 'atuin init zsh'
znap eval zoxide 'zoxide init zsh'

true
