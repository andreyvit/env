{
    "env": {"XX_GOPATH": "$GS_GOPATH", "XXX_GOPATH": "/Users/andreyvit/dev/tt/michigan/go"},
    "use_gs_gopath": true,

    "shell": ["/bin/bash", "--login", "-c", "$CMD"],

    "autosave": true,

    "gscomplete_enabled": true,
    "fmt_enabled": true,

    "fmt_tab_indent": true,
    "fmt_tab_width": 4,

    "gslint_enabled": true,

    // filter the kinds of lint checks that are done. supported kinds:
    //
    // gs.syntax - parser/syntax errors - it makes no sense to filter this as it will simply
    //             manifest itself in other checks (which will likely not be done if there are syntax errors)
    // gs.flag.parse - check for possibly missing calls to flag.Parse()
    // gs.types - do a typecheck using the go/types package(like the old gotype)
    //            disabled by default until it's ready(copied from tip)
    "lint_filter": [
        "gs.flag.parse",
        "gs.types"
    ],

    // Whether or not comp lint is enabled (this might conflict with gslint)
    "comp_lint_enabled": false,

    // The list of commands that comp-lint will run (in the order specified)
    // each entry contains a map of:
    //    cmd: a list containing the command and its args
    //    shell: whether or not use the $shell to run this command
    //        if you don't need $shell features then don't set this.
    //    global: whether or not commands like go install should affect the system globally
    //        by default the environment variable GOBIN is set to ($TEMPDIR/GoSublime/bin
    //        which in the installation of commands via comp-lint going there instead of into
    //        one of your GOPATHs.
    //        setting this to true, you can e.g automate the actual installation of your commands
    // additionally, for `shell` and `global` if the value is not `true` then it's assumed to be false
    "comp_lint_commands": [
        {"cmd": ["go", "install"]}
    ],


    // whether or not to include snippets in the auto-completion list
    "autocomplete_snippets": true,

    // whether or not to include Test*, Benchmark* and Example* functions in the auto-completion list
    "autocomplete_tests": false,

    // whether or not builtin types and functions should be shown in the auto-completion list
    "autocomplete_builtins": false,

    // whether or not to show an expanded(closure) version of func types in the auto-completion list
    // e.g. `type Fun func(i int)`
    // will result in two entries `Fun` and `Fun {}`
    // expanding to `Fun` and `func(i) {...}` respectively
    "autocomplete_closures": false,

    // you may set this to a regexp which will be used to filter entries in the auto-completion list
    // e.g. "autocomplete_filter_name": "^autogenerated_" will prevent any type or function
    // whose name begins with "autogenerated_" from appearing in the auto-completion list
    "autocomplete_filter_name": "",

    // whether or not autocomplete should suggest possible imports when autocomplete fails to
    // find a match.
    // note: this feature only comes into effect when autocomplete was triggered after a dot, e.g. `fmt.|`
    "autocomplete_suggest_imports": false,

    // whether or not to show function call tip in the status bar
    // the same can be achieved ctrl+dot,ctrl+space using an output panel
    "calltips": true,

    // whether or not to use named imports when the basename of the import path doesn't match the pkg name
    // e.g. gosubli.me/go-foo would be imported as:
    //     import (
    //         foo "gosubli.me/go-foo"
    //     )
    "use_named_imports": false,

    // whether or not MarGo may automatically run `go install` for packages that are missing
    // when you `import`, or `autocomplete` them
    "autoinst": true,

    // as an alternative to Sublime Text's snippet system you may add snippets to GoSublime's
    // code-completion by adding them to your user settings in the same format as bellow.
    //
    // "snippets": [
    //     {
    //         "match": {"global": true}, // these snippets will only be presented in the global scope
    //         "snippets": [
    //             {"text": "init", "title": "func init()", "value": "func init() {\n\t$1\n}"}
    //         ]
    //     },
    //     {
    //         "match": {"local": true}, // these snippets will only be present in a function scope
    //         "snippets": [
    //             {"text": "print", "title": "print(...)", "value": "print($1)"},
    //             {"text": "println", "title": "println(...)", "value": "println($1)"}
    //         ]
    //     }
    // ]
    //
    // you maybe add field markers ($1, $2, etc) to the `value` string to dictate where the cursor is place
    // once a completion is expanded and where it's placed once you press tab afterwards.
    // duplicate markers e.g f("...", $1, $1) will result in multiple cursors, one for each duplication.
    "snippets": [],

    // whether or not 9o should ask Sublime Text to show(scroll to) the end of a command's output
    // by default it will attempt to show the beginning
    "9o_show_end": false,

    // if set, 9o will run in single-instance mode instead of per-pkg
    // the name can be any string, so you can e.g. set it per-project and maintain project-specific
    // command history
    "9o_instance": "",

    // if set 9o will use the specified color scheme.
    // the path must relative to `Packages` e.g. `Packages/My/9o Specific.tmTheme`
    // `""` essentially means no color_scheme (like the Sublime Text console)
    // `"default"` leaves it as-is, i.e. matching the color_scheme that's being used for your other views
    "9o_color_scheme": "default",

    // a mapping of names to string commands e.g. `{"ci": "git ci $_args"}`
    // the environment variable `$_args` will be the raw, un-parsed argument passed to the command such that,
    // in the command `ci a.go    b.go`, `$_args` will be `a.go    b.go`
    // and the alias above expands to `git ci a.go    b.go`
    //
    // aliases are resolved recursively so they can be re-used, however recursive aliases are not supported.
    // e.g. if you define an alias `"gs-git": "git --git-dir=... $_args"`,
    // it will be used in the alias `"gs-ci": "gs-git commit $_args"`
    // but an alias `"git": "git $_args"` will fail because it resolves to itself.
    // you can, however create the alias `"git": "$HOME/git/bin/git"` which allows you to add commands
    // to 9o without them needing to appear in your $PATH
    //
    // examples
    // {
    //      "git": "/usr/bin/git $_args", // call git directly, otherwise it's run through your `shell`
    //      "ci": "git commit $_args",
    //      "ci.": "ci $_fn", // $_fn points to the abs path of the current file
    //      "gro": "sh grep $_args 2>/dev/null", // call grep through your shell and discard stderr
    // }
    //
    "9o_aliases": {},

    // what 9o command to run when (super or )ctrl+dot,ctrl+b us pressed
    // e.g. ["go", "build"]
    // the 9o command ^1 recalls the last command you ran manually
    // see 9o help(ctrl+9 "help") for more details about what commands are supported
    "build_command": ["^1"],

    "auto_complete_triggers": [ {"selector": "source.go", "characters": "."} ],

    // exclude files with the listed prefixes from the file browsing palette (ctrl+dot,ctrl+m)
    "fn_exclude_prefixes": [".", "_"],
}
